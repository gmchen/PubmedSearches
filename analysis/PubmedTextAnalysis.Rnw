\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\usepackage{amsmath}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
# set global chunk options
opts_chunk$set(fig.path='Figures/', fig.align='center', fig.show='hold', echo=FALSE, warning=FALSE, message=FALSE, results="hide", cache=FALSE)
@

\title{Trends in Patient Descriptions in the Medical Literature}

\author{Gregory M Chen}

\maketitle
This document outlines the methods and analyses performed for this project.

<<load_libraries>>=
library(tm)
library(SnowballC)
library(readr)
library(stringr)
library(XML)
library(RTextTools)
library(reshape2)
library(wordcloud)
library(scales)
library(openNLP)
library(ggplot2)
library(gridExtra)
@

<<load_from_files>>=
if(file.exists("jamaTexts.RData") &&
   file.exists("nejmTexts.RData") &&
   file.exists("annalsTexts.RData") &&
   file.exists("lancetTexts.RData") &&
   file.exists("bmjTexts.RData")) {
  load("jamaTexts.RData")
  load("nejmTexts.RData")
  load("annalsTexts.RData")
  load("lancetTexts.RData")
  load("bmjTexts.RData")
} else {
  jamaTexts <- list(title=character(), abstract=character(), keywords=list(), year=numeric(), month=numeric(), publication.types=list())
  annalsTexts <- list(title=character(), abstract=character(), keywords=list(), year=numeric(), month=numeric(), publication.types=list())
  nejmTexts <- list(title=character(), abstract=character(), keywords=list(), year=numeric(), month=numeric(), publication.types=list())
  lancetTexts <- list(title=character(), abstract=character(), keywords=list(), year=numeric(), month=numeric(), publication.types=list())
  bmjTexts <- list(title=character(), abstract=character(), keywords=list(), year=numeric(), month=numeric(), publication.types=list())
  
  # Load data from xml
  for(year in 1976:2015) {
    yearIndex <- year - 1975
    for(month in 1:12) {
      for(journalName in c("jama", "nejm", "annals", "lancet", "bmj")) {
        print(paste("Parsing year", year, "and month", month))
        if(journalName == "jama") {
          current.xml.text <- read_file(paste0("../Pubmed_JAMA/xml/", year, "_", month, ".xml"))
        } else if(journalName == "annals") {
          current.xml.text <- read_file(paste0("../Pubmed_Annals_Intern_Med/xml/", year, "_", month, ".xml"))
        } else if(journalName == "nejm") {
          current.xml.text <- read_file(paste0("../Pubmed_NEJM/xml/", year, "_", month, ".xml"))
        } else if(journalName == "lancet") {
          current.xml.text <- read_file(paste0("../Pubmed_LANCET/xml/", year, "_", month, ".xml"))
        } else if(journalName == "bmj") {
          current.xml.text <- read_file(paste0("../Pubmed_BMJ/xml/", year, "_", month, ".xml"))
        }
        
        current.xml.text.split <- str_split(current.xml.text,  "(?=\\<\\?xml version\\=)")[[1]]
        current.xml.text.split <- current.xml.text.split[current.xml.text.split != ""]
        xml.text.lists <- lapply(current.xml.text.split, xmlToList)
        xml.text.list <- do.call(c, xml.text.lists)
        
        current.titles <- unname(sapply(xml.text.list, "[[", c("MedlineCitation", "Article", "ArticleTitle")))
        
        current.abstract.lists <- sapply(xml.text.list, "[[", c("MedlineCitation", "Article", "Abstract"))
        
        current.abstract.lists <- lapply(xml.text.list, "[[", c("MedlineCitation", "Article", "Abstract"))
        # Sometimes $AbstractText is a character vector, sometimes is a list with $text character vectors
        current.abstracts <- sapply(current.abstract.lists, function(x) {
          if(is.null(x)) {
            return(NULL)
          }
          if(is.character(x$AbstractText)) {
            return(x$AbstractText)
          }
          if(is.list(x$AbstractText)) {
            x <- x[(names(x) == "AbstractText")]
            x <- x[sapply(x, function(y) "text" %in% names(y))]
            return(paste(sapply(x, function(y) y$text), collapse=" "))
          }
          else{
            stop("Found an AbstractText field that is neither null, a character, or a list")
            }
          })
            
        current.keywords <- unname(lapply(xml.text.list, "[[", c("MedlineCitation", "MeshHeadingList")))
        current.keywords <- lapply(current.keywords, function(x) sapply(x, "[[", c("DescriptorName", "text")))
        
        # For each article parse out PubmedData -> History, then the PubMedPubDate list with .attrs PubStatus == "pubmed"
        
        current.PubMedData.History.lists <- lapply(xml.text.list, "[[", c("PubmedData", "History"))
        current.dates <- lapply(current.PubMedData.History.lists, function(list) {
            attrs.vals <- sapply(list, "[[", ".attrs")
            pubmed.date.index <- which(attrs.vals == "pubmed" & names(attrs.vals) == "PubMedPubDate.PubStatus")
            return(list[[pubmed.date.index]])
          })
        
        current.years <- unname(sapply(current.dates, "[[", "Year"))
        current.years <- as.numeric(current.years)
        current.months <- unname(sapply(current.dates, "[[", "Month"))
        current.months <- as.numeric(current.months)
        
        if(!all(current.years == year)) warning(paste0("Not all years are the same for year ", year, " month ", month, "journal ", journalName))
        if(!all(current.months == month)) warning(paste0("Not all months are the same for year ", year, " month ", month, "journal ", journalName))
        
        current.publication.types <- unname(lapply(xml.text.list, `[[`, c("MedlineCitation", "Article", "PublicationTypeList")))
        current.publication.types <- lapply(current.publication.types, function(x) sapply(x, "[[", "text"))
        
        # check that all lengths are equal
        current.length <- length(current.titles)
        if(current.length != length(current.abstracts) ||
           current.length != length(current.keywords) || 
           current.length != length(current.years) ||
           current.length != length(current.months) ||
           current.length != length(current.publication.types)) {
            stop("Not all lists are equal length")
          }
        vals.to.add <- list(title=current.titles, abstract=current.abstracts, keywords=current.keywords, year=current.years, month=current.months, publication.types=current.publication.types)
        
        if(journalName == "jama") {
          jamaTexts <- lapply(names(vals.to.add),function(x) c(jamaTexts[[x]],vals.to.add[[x]]))
          names(jamaTexts)<-names(vals.to.add)
        } else if(journalName == "annals") {
          annalsTexts <- lapply(names(vals.to.add),function(x) c(annalsTexts[[x]],vals.to.add[[x]]))
          names(annalsTexts)<-names(vals.to.add)
        } else if(journalName == "nejm") {
          nejmTexts <- lapply(names(vals.to.add),function(x) c(nejmTexts[[x]],vals.to.add[[x]]))
          names(nejmTexts)<-names(vals.to.add)
        } else if(journalName == "lancet") {
          lancetTexts <- lapply(names(vals.to.add),function(x) c(lancetTexts[[x]],vals.to.add[[x]]))
          names(lancetTexts)<-names(vals.to.add)
        } else if(journalName == "bmj") {
          bmjTexts <- lapply(names(vals.to.add),function(x) c(bmjTexts[[x]],vals.to.add[[x]]))
          names(bmjTexts)<-names(vals.to.add)
        }
      }
    }
  }
  
  if(length(unlist(lancetTexts$title)) != length(lancetTexts$title)) {
    stop("Found Lancet title that is not a list of length 1")  
  }
  if(length(unlist(bmjTexts$title)) != length(bmjTexts$title)) {
    stop("Found BMJ title that is not a list of length 1")  
  }
  
  lancetTexts$title <- unlist(lancetTexts$title)
  bmjTexts$title <- unlist(bmjTexts$title)
  
  save(jamaTexts, file="jamaTexts.RData")
  save(nejmTexts, file="nejmTexts.RData")
  save(annalsTexts, file="annalsTexts.RData")
  save(lancetTexts, file="lancetTexts.RData")
  save(bmjTexts, file="bmjTexts.RData")
}
@

<<remove_headers>>=
jama.regexes.to.remove <- c(
                    "^The cover\\.",
                    "^A piece of my mind" ,
                    "^JAMA patient page",
                    "[Cc]ouncil on Scientific Affairs.$",
                    "Council on Scientific Affairs. American Medical Association.",
                    "^From the NIH"
                    )
nejm.regexes.to.remove <- c(
                    "^IMAGES IN CLINICAL MEDICINE\\. ",
                    "^Images in clinical medicine\\. ",
                    "^VIDEOS IN CLINICAL MEDICINE\\. ",
                    "Videos in clinical medicine\\. ",
                    "^CLINICAL PROBLEM-SOLVING\\. ",
                    "^Clinical problem-solving. ",
                    "^CLINICAL PRACTICE\\. ",
                    "^Clinical practice\\. ",
                    "^INTERACTIVE MEDICAL CASE\\. ",
                    "^Interactive medical case\\. ",
                    "^CASE RECORDS of the MASSACHUSETTS GENERAL HOSPITAL. Case [0-9]*-[0-9]*\\. ",
                    "Case records of the Massachusetts General Hospital. Case [0-9]*-[0-9]*\\.",
                    "Case records of the Massachusetts General Hospital. Weekly clinicopathological exercises. [0-9]*-[0-9]*",
                    "Case [0-9]*-[0-9]*:")

annals.regexes.to.remove <- c(
  "^ACP Journal Club. review: ",
  "^ACP Journal Club",
  "^Summaries for Patients\\. ",
  "^Correction: ",
  "^In the Clinic."
  )
for(current.regex in jama.regexes.to.remove) {
  jamaTexts$title <- gsub(current.regex, "", jamaTexts$title)
}

for(current.regex in nejm.regexes.to.remove) {
  nejmTexts$title <- gsub(current.regex, "", nejmTexts$title)
}

for(current.regex in annals.regexes.to.remove) {
  annalsTexts$title <- gsub(current.regex, "", annalsTexts$title)
  }
all.texts <- list(jama=jamaTexts, nejm=nejmTexts, annals=annalsTexts, lancet=lancetTexts, bmj=bmjTexts)
@

<<generate_publication_type_plots>>=
clinical.trial.pubtypes <- c("Clinical Trial",                                
                             "Clinical Trial, Phase I",                               
                             "Clinical Trial, Phase II",                              
                             "Clinical Trial, Phase III",                               
                             "Clinical Trial, Phase IV",
                             "Randomized Controlled Trial",
                             "Pragmatic Clinical Trial",
                             "Controlled Clinical Trial")

clinical.trial.exclusion.pubtypes <- c(
                                      "Biography",
                                      "Case Reports",
                                      "Classical Article",
                                      "Clinical Conference",
                                      "Comment",
                                      "Congresses",
                                      "Consensus Development Conference",
                                      "Duplicate Publication",
                                      "Editorial",
                                      "Guideline",
                                      "Historical Article",
                                      "Legal Cases",
                                      "Letter",
                                      "News",
                                      "Patient Education Handout",
                                      "Portraits",
                                      "Retracted Publication",
                                      "Review"
                                      )

apply.clinical.trial.filters <- function(pubtypes.list) {
  any(clinical.trial.pubtypes %in% pubtypes.list) & !any(clinical.trial.exclusion.pubtypes %in% pubtypes.list)
}
# Publication type plots
publication.type.plots <- list()
for(journalName in names(all.texts)) {
  if(journalName == "jama") {
    journalNameTitle <- "JAMA"
    texts <- jamaTexts
  } else if (journalName == "annals") {
    journalNameTitle <- "Annals of Internal Medicine"
    texts <- annalsTexts
  } else if (journalName == "nejm") {
    journalNameTitle <- "New England Journal of Medicine"
    texts <- nejmTexts
  } else if(journalName == "lancet") {
    journalNameTitle <- "The Lancet"
    texts <- lancetTexts
  } else if(journalName == "bmj") {
    journalNameTitle <- "BMJ"
    texts <- bmjTexts
  }
  year.counts.with.clinical.trial <- sapply(1976:2015, function(year) {
    mean(sapply(texts$publication.types[texts$year == year], apply.clinical.trial.filters))
    })
  #plot(1976:2015, year.counts.with.clinical.trial)
  
  year.counts.with.case.report <- sapply(1976:2015, function(year) {
    mean(sapply(texts$publication.types[texts$year == year], function(pubtypes) "Case Reports" %in% pubtypes))
    })
  #plot(1976:2015, year.counts.with.case.report)
  
  pubtype.fig.df <- data.frame(clinical.trial=year.counts.with.clinical.trial, case.report=year.counts.with.case.report, year=1976:2015)
  pubtype.fig.df.m <- melt(pubtype.fig.df, id="year")
  colnames(pubtype.fig.df.m) <- c("year", "PublicationType", "Frequency")
  
  
  publication.type.plot <- ggplot(pubtype.fig.df.m, aes(x = year, y = Frequency, colour=factor(PublicationType))) +  
    geom_point(stat="identity") + 
    scale_colour_manual(values=c("#045a8d", "#bd0026"), name="Publication Type", labels=c("Clinical Trial", "Case Report")) +
    #geom_smooth(aes(colour=factor(PublicationType)), method = lm, show.legend = FALSE) + 
    geom_smooth(aes(colour=factor(PublicationType)), method = loess, method.args = list(family = "symmetric"), show.legend = FALSE) +
    ggtitle(paste0("Clinical Trials vs Case Reports in ", journalNameTitle)) + # plot title
    xlab("Year") + 
    ylab("Frequency") +
    scale_y_continuous(labels = percent_format()) +
    theme_bw() +
    theme(panel.grid.major = element_blank())
  
  publication.type.plots[[journalName]] <- publication.type.plot
  
  #ggsave(paste0("figures/", journalName, "_pubtypes.pdf"), publication.type.plot, width=6, height=4.5)
}
@

<<jama_publication_types, fig.width=6, fig.height=5>>=
#plot(1976:2015, sapply(1976:2015, function(year) sum(all.texts$jama$year == year)), ylim=c(0, 1600))
#plot(1976:2015, sapply(1976:2015, function(year) sum(all.texts$nejm$year == year)), ylim=c(0, 1800))
#plot(1976:2015, sapply(1976:2015, function(year) sum(all.texts$annals$year == year)), ylim=c(0, 850))
#plot(1976:2015, sapply(1976:2015, function(year) sum(all.texts$lancet$year == year)), ylim=c(0,3000))
#plot(1976:2015, sapply(1976:2015, function(year) sum(all.texts$bmj$year == year)), ylim=c(0, 3600))
publication.type.plots$jama
@

<<nejm_publication_types>>=
publication.type.plots$nejm
@

<<annals_publication_types>>=
publication.type.plots$annals
@

<<lancet_publication_types>>=
publication.type.plots$lancet
@

<<bmj_publication_types>>=
publication.type.plots$bmj
@

<<save_files_for_manual_inspection, eval=FALSE>>=
for(journalName in names(all.texts)) {
  texts <- all.texts[[journalName]]
  # clinical trials texts_for_review
  for(year in 1976:2015) {
      write.table(
        data.frame("", unique(texts$title[texts$year==year])),
        file = paste0("texts_for_review/", journalName, "/", journalName, "_all_titles_", year, ".csv"), 
        col.names = FALSE,
        row.names = FALSE,
        sep=",")
  }
  
  # 5 year intervals
  for(yearstart in c(1976, 1981, 1986, 1991, 1996, 2001, 2006, 2011)) {
    is.clinical.trial <- sapply(texts$publication.types, apply.clinical.trial.filters  )
    is.case.report <- sapply(texts$publication.types, function(pubtypes) "Case Reports" %in% pubtypes)
    write.table(
      data.frame("", unique(texts$title[texts$year >= yearstart & texts$year <= yearstart+4 & is.clinical.trial])),
      file = paste0("texts_for_review/", journalName, "/", journalName, "_clinical_trial_titles_", yearstart, "-", yearstart+4, ".csv"),
      col.names=FALSE,
      row.names=FALSE,
      sep=",")
    write.table(
      data.frame("", unique(texts$title[texts$year >= yearstart & texts$year <= yearstart+4 & is.case.report])),
      file = paste0("texts_for_review/", journalName, "/", journalName, "_case_report_titles_", yearstart, "-", yearstart+4, ".csv"),
      col.names=FALSE,
      row.names=FALSE,
      sep=",")
    
  }
}
@

<<generate_patient-centric_keywords_by_journal>>=

clinical.trials.merged.df <- do.call(rbind, lapply(names(all.texts), function(journalName) {
  texts <- all.texts[[journalName]]
  
  is.clinical.trial <- sapply(texts$publication.types, apply.clinical.trial.filters)
  
  current.data.frame <- data.frame(
    title=texts$title[is.clinical.trial],
    year=texts$year[is.clinical.trial],
    journal=journalName,
    stringsAsFactors = FALSE)
  return(current.data.frame)
  }))

#set.seed(1000)
#rater.file.merged.df <- rater.file.merged.df[sample(nrow(rater.file.merged.df)),]

clinical.trials.merged.df$title.processed <-    removeNumbers(
                                                removePunctuation(
                                                tolower(
                                                  clinical.trials.merged.df$title)))# TODO: add male female donor

patient.keywords <- c(
                    "patient",
                    "patients",
                    "adult",
                    "adults",
                    "woman",
                    "women",
                    "man",
                    "men",
                    "child",
                    "children",
                    "infant",
                    "infants",
                    "male",
                    "males",
                    "female",
                    "females",
                    "donor",
                    "donors")

clinical.trials.merged.df$patient.keyword.hit <- sapply(clinical.trials.merged.df$title.processed, function(title) 
  any(patient.keywords %in% strsplit(title, " ")[[1]])
  )

clinical.trials.merged.df$title.length <- sapply(clinical.trials.merged.df$title, nchar)

clinical.trials.merged.df$time.period <- "middle"
clinical.trials.merged.df$time.period[clinical.trials.merged.df$year %in% 1976:1980] <- "early"
clinical.trials.merged.df$time.period[clinical.trials.merged.df$year %in% 2011:2015] <- "late"
clinical.trials.merged.df$time.period[clinical.trials.merged.df$year %in% 1976:1985] <- "early"
clinical.trials.merged.df$time.period[clinical.trials.merged.df$year %in% 2006:2015] <- "late"

patient.keyword.df.for.barplot <- data.frame(proportion=numeric(), timeframe=factor(levels=c("early", "late")), title.length=numeric(), journal=character())

for(journalName in names(all.texts)) {
  mean.patient.keyword.hits.early <- mean(
    clinical.trials.merged.df$patient.keyword.hit[
                  clinical.trials.merged.df$time.period == "early" &
                  clinical.trials.merged.df$journal == journalName
                  ] == TRUE
    )
  num.patient.keyword.hits.early <- sum(
    clinical.trials.merged.df$patient.keyword.hit[
                  clinical.trials.merged.df$time.period == "early" &
                  clinical.trials.merged.df$journal == journalName
                  ] == TRUE
    )
  num.patient.keyword.nonhits.early <- sum(
    clinical.trials.merged.df$patient.keyword.hit[
                  clinical.trials.merged.df$time.period == "early" &
                  clinical.trials.merged.df$journal == journalName
                  ] == FALSE
    )
  
  mean.patient.keyword.hits.late <- mean(
    clinical.trials.merged.df$patient.keyword.hit[
                  clinical.trials.merged.df$time.period == "late" &
                  clinical.trials.merged.df$journal == journalName
                  ] == TRUE
    )
  num.patient.keyword.hits.late <- sum(
    clinical.trials.merged.df$patient.keyword.hit[
                  clinical.trials.merged.df$time.period == "late" &
                  clinical.trials.merged.df$journal == journalName
                  ] == TRUE
    )
  num.patient.keyword.nonhits.late <- sum(
    clinical.trials.merged.df$patient.keyword.hit[
                  clinical.trials.merged.df$time.period == "late" &
                  clinical.trials.merged.df$journal == journalName
                  ] == FALSE
    )
  
  mean.title.length.early <- mean(
    clinical.trials.merged.df$title.length[
                  clinical.trials.merged.df$time.period == "early" &
                  clinical.trials.merged.df$journal == journalName
                  ]
    )
  
  mean.title.length.late <- mean(
    clinical.trials.merged.df$title.length[
                  clinical.trials.merged.df$time.period == "late" &
                  clinical.trials.merged.df$journal == journalName
                  ]
    )
  df.to.add <- data.frame(
    proportion=c(mean.patient.keyword.hits.early, mean.patient.keyword.hits.late),
    n.hits=c(num.patient.keyword.hits.early, num.patient.keyword.hits.late),
    n.nonhits=c(num.patient.keyword.nonhits.early, num.patient.keyword.nonhits.late),
    timeframe=c("early", "late"),
    title.length=c(mean.title.length.early, mean.title.length.late),
    journal=journalName)
  patient.keyword.df.for.barplot <- rbind(patient.keyword.df.for.barplot, df.to.add)
  
}

patient.keyword.df.for.barplot$journal <- factor(
                                            patient.keyword.df.for.barplot$journal,
                                            levels=c("jama", "lancet", "annals", "bmj", "nejm"))

patient.keyword.df.for.barplot$lcb.95 <- NA
patient.keyword.df.for.barplot$ucb.95 <- NA

sapply(1:nrow(patient.keyword.df.for.barplot), function(rowi) {
  prop.test.out <- prop.test(patient.keyword.df.for.barplot$n.hits[rowi], patient.keyword.df.for.barplot$n.hits[rowi] + patient.keyword.df.for.barplot$n.nonhits[rowi])
  patient.keyword.df.for.barplot$lcb.95[rowi] <<- prop.test.out$conf.int[1]
  patient.keyword.df.for.barplot$ucb.95[rowi] <<- prop.test.out$conf.int[2]
})

prop.test(as.matrix(patient.keyword.df.for.barplot[patient.keyword.df.for.barplot$journal == "jama",c("n.hits", "n.nonhits")]))
@

<<patient-centric_keywords_by_journal, fig.width=5, fig.height=5, out.width="0.6\\textwidth">>=
ggplot(data=patient.keyword.df.for.barplot, aes(x=journal, y=proportion, fill=timeframe)) +
  geom_errorbar(aes(ymin=lcb.95, ymax=ucb.95), width=0.5, position=position_dodge(0.9), col="darkgray") +
  geom_bar(stat='identity', position=position_dodge()) + 
  #ggtitle("Proportion of clinical trial titles with patient-centric keywords") + 
  scale_fill_manual(name="Time Period", values=c('gray','#E69F00'), labels=c("1976-1980", "2011-2015")) + 
  theme_classic() + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), axis.text.y = element_text(size=10)) + 
  scale_x_discrete(labels=c("JAMA", "Lancet", "Ann Intern\nMed.", "BMJ", "N Engl J\nMed.")) +
  scale_y_continuous(breaks=seq(0,0.6,0.1), limits=c(0,0.6), labels=percent_format()) +
  ylab("Percent of titles containing a patient-centric keyword") +
  xlab("")
@

<<get_corpus_texts_and_frequency_analysis>>=
if(file.exists("corpusTexts.RData") && file.exists("frequencyAnalysis.RData")) {
  load("corpusTexts.RData")
  load("frequencyAnalysis.RData")
  
  } else {
  corpusTexts <- list(jama=list(), nejm=list(), annals=list(), lancet=list(), bmj=list())
  
  for(journalName in names(all.texts)) {
    texts <- all.texts[[journalName]]
    
    is.clinical.trial <- sapply(texts$publication.types, apply.clinical.trial.filters)
    is.not.clinical.trial <- !is.clinical.trial
    is.case.report <- sapply(texts$publication.types, function(pubtypes) "Case Reports" %in% pubtypes)
    
    
    
    textsToInclude <- list(
                all=rep(TRUE, length(texts$year)),
                clinical.trials=is.clinical.trial,
                non.clinical.trials=is.not.clinical.trial,
                case.reports=is.case.report,
                non.case.reports=!is.case.report)
    
    corpusTexts[[journalName]]  <- lapply(c("title"), function(titleOrAbstract){
        sublistToReturn <- lapply(names(textsToInclude), function(textTypeToInclude) {
          includeVector <- textsToInclude[[textTypeToInclude]]
          corpusToReturn <- NULL
          for(year in 1976:2015) {
            if(titleOrAbstract == "title") {
              current.corpus.texts <- texts$title[texts$year == year & includeVector]
              # remove duplicates
              current.corpus.texts <- unique(current.corpus.texts)
            } else if(titleOrAbstract == "abstract") {
              current.corpus.texts <- texts$abstract[texts$year == year & includeVector]
            }
            toAdd <- Corpus(VectorSource(paste(current.corpus.texts, collapse = "\n")))
            meta(toAdd, "id", "local") <- paste0(titleOrAbstract, "_", textTypeToInclude, "_", year)
            if(is.null(corpusToReturn)) {
              corpusToReturn <- toAdd
            } else {
              corpusToReturn <- c(corpusToReturn, toAdd)
            }
          }
          
          # To lowercase
          corpusToReturn <- tm_map(corpusToReturn, content_transformer(tolower))
          # Remove punctuation
          corpusToReturn <-tm_map(corpusToReturn, removePunctuation)
          return(corpusToReturn)
        })
        names(sublistToReturn) <- names(textsToInclude)
        return(sublistToReturn)
      })
    #names(corpusTexts[[journalName]]) <- c("title", "abstract")
    names(corpusTexts[[journalName]]) <- c("title")
  }
  
  frequencyAnalysis <- lapply(corpusTexts, function(corpusTextByJournal) {
    lapply(corpusTextByJournal, function(corpusTextByTextType) {
        lapply(corpusTextByTextType, function(corpusTextByPubType) {
          out.vals <- lapply(c("monogram", "bigram"), function(gramtype) {
            if(gramtype == "monogram") {
              myMat <- DocumentTermMatrix(corpusTextByPubType)
            } else if(gramtype == "bigram") {
              BigramTokenizer <- function(x) 
                unlist(lapply(ngrams(words(x), 2), paste, collapse = " "), use.names = FALSE)
              myMat <- TermDocumentMatrix(corpusTextByPubType, control = list(tokenize = BigramTokenizer))
              myMat <- t(myMat)
            } 
            
            matrix.colsums <- colSums(inspect(myMat))
            matrix.rowsums <- rowSums(inspect(myMat))
            year.term.count.sums <- matrix.rowsums
            freq.count.table <- data.frame(word=colnames(myMat), count=matrix.colsums)
            
            myTDMCounts <- inspect(myMat)
            
            term.freq.per.100000 <- myTDMCounts * 100000 / matrix.rowsums
            
            # only include terms that have occurred at least 1/10000 (0.01%) of the time
            myTDMHiFreq.per.100000 <- term.freq.per.100000[,freq.count.table$count > 0.0001 * sum(freq.count.table$count)]
           
            # For monogram analysis, remove stopwords. Note that this happens after frequencies are calculated.
            if(gramtype == "monogram") {
              # remove stopwords
              myTDMHiFreq.per.100000 <- myTDMHiFreq.per.100000[,!(colnames(myTDMHiFreq.per.100000) %in% removePunctuation(stopwords()))]
              }
            
             
            years <- 1976:2015
            lm.across.years <- apply(myTDMHiFreq.per.100000, 2, function(y) lm(y ~ years))
            lm.coefficients <- sapply(lm.across.years, function(current.lm) coef(current.lm)[["years"]])
            lm.95.percent.confints <- lapply(lm.across.years, function(current.lm) confint(current.lm)["years",])
            lm.pvals <- sapply(lm.across.years, function(current.lm) summary(current.lm)$coefficients["years",4])
            
            fdr.adj.year.pvals <- p.adjust(lm.pvals, method="fdr")
            
            sig.lm.coefficients <- lm.coefficients[fdr.adj.year.pvals < 0.01]
            sig.lm.95.percent.confints <- lm.95.percent.confints[fdr.adj.year.pvals < 0.01]
            sig.fdr.adj.pvals <- fdr.adj.year.pvals[fdr.adj.year.pvals < 0.01]
            sig.lm.pvals <- lm.pvals[fdr.adj.year.pvals < 0.01]
            
            return(list(
                    term.freq.per.100000=term.freq.per.100000,
                    lm.coefficients=lm.coefficients,
                    lm.95.percent.confints=lm.95.percent.confints,
                    lm.pvals=lm.pvals,
                    sig.lm.coefficients=sig.lm.coefficients,
                    sig.lm.95.percent.confints=sig.lm.95.percent.confints,
                    sig.fdr.adj.pvals=sig.fdr.adj.pvals,
                    sig.lm.pvals=sig.lm.pvals
                    ))
          })
          names(out.vals) <- c("monogram", "bigram")
          return(out.vals)
        })
      })
    })
  save(corpusTexts, file="corpusTexts.RData")
  save(frequencyAnalysis, file="frequencyAnalysis.RData")
  }
@

We next focussed our attention on trends in the Journal of the American Medical Association. Title texts were loaded as a \texttt{corpus} object in R package \texttt{tm} and monogram and bigram frequencies from the years 1976 to 2015 were computed. Monograms and bigrams of very low frequency (< 0.0001, or < 0.01\%) over the 40-year range were excluded. 

For each monogram or bigram, a linear model was performed with monogram/bigram frequency as the dependent variable and year as the independent variable. The model used was

\begin{align*}
y_{ij} &= \beta_{0i} + \beta_{1i} \cdot x_{ij}
\end{align*}

where $i \in {1, 2, \ldots, N_{\textnormal{monogram}}} \textnormal{ or } {1, 2, \ldots, N_{\textnormal{bigram}}}$, $j \in {1, 2, \ldots, 40}$ is the index of the year in the year range.

Linear regression was performed for each monogram or bigram, and the coefficients $\beta_{1i}$ were extracted. Each $\beta_{1i}$ can be interpreted as the average increase in frequency per year for the $i^{\textnormal{th}}$ monogram or bigram. Linear regression also produced p values $p_i$. For monograms and bigrams separately, multiple testing correction across the $p_i$ values was performed using the Benjamini and Hochberg method with an FDR threshold of 0.01. 

<<get_tables_of_top_hits>>=
monogram.coefficient.texts <- paste0(
              sprintf("%.2f", frequencyAnalysis$jama$title$all$monogram$sig.lm.coefficients),
              " (",
              sprintf("%.2f", sapply(frequencyAnalysis$jama$title$all$monogram$sig.lm.95.percent.confints, `[[`, 1)),
              ", ",
              sprintf("%.2f", sapply(frequencyAnalysis$jama$title$all$monogram$sig.lm.95.percent.confints, `[[`, 2)),
              ")")

monogram.regression.df <- data.frame(
                              term=names(frequencyAnalysis$jama$title$all$monogram$sig.lm.coefficients),
                              coef.text=monogram.coefficient.texts,
                              p.val=frequencyAnalysis$jama$title$all$monogram$sig.lm.pvals,
                              fdr.adj.pvals=frequencyAnalysis$jama$title$all$monogram$sig.fdr.adj.pvals
                          )

rownames(monogram.regression.df) <- NULL

monogram.regression.df <- monogram.regression.df[order(frequencyAnalysis$jama$title$all$monogram$sig.lm.coefficients),]
@

<<monogram_wordcloud_positive, fig.width=8, fig.height=8>>=

#########################################################

# First, get a list of significant hits in titles. Remove stopwords
title.texts.all.significant.hits <- frequencyAnalysis$jama$title$all$monogram$sig.lm.coefficients
#title.texts.all.significant.hits <- title.texts.all.significant.hits[!(names(title.texts.all.significant.hits) %in% stopwords())]

# Remove the words from journal-specific headings
# TODO: remove these earlier on
# A piece of my mind
# JAMA patient page
# The cover.
# Council on Scientific Affairs
# From the NIH:
#title.texts.words.to.exclude <- c("piece", "mind", "jama", "patient", "page", "cover", "council")
#title.texts.all.significant.hits <- title.texts.all.significant.hits[!(names(title.texts.all.significant.hits) %in% title.texts.words.to.exclude)]

# Top 20 positive hits
#writeLines(paste(rev(tail(names(title.texts.all.significant.hits), 20)), collapse="\n"))
# Top 20 negative hits
#writeLines(paste(head(names(title.texts.all.significant.hits), 20), collapse="\n"))

# Wordcloud for positive hits
cool.colours <- c("#006d2c", "#0868ac", "#045a8d", "#016c59", "#253494")
warm.colours <- c("#b30000", "#980043", "#7a0177", "#993404", "#bd0026")
set.seed(1000) # 1000
#pdf("jama_title_monogram_wordcloud_positive.pdf", width = 8, height = 8)
wordcloud(
          names(title.texts.all.significant.hits)[title.texts.all.significant.hits>0],
          freq=title.texts.all.significant.hits[title.texts.all.significant.hits>0], 
          min.freq = -Inf, 
          random.color = TRUE, 
          rot.per = 0, 
          colors=cool.colours)
#dev.off()
@

<<monogram_wordcloud_negative, fig.width=8, fig.height=8>>=
#pdf("figures/jama_title_monogram_wordcloud_negative.pdf", width = 8, height = 8)
wordcloud(
  names(title.texts.all.significant.hits)[title.texts.all.significant.hits<0],
  freq=-title.texts.all.significant.hits[title.texts.all.significant.hits<0], 
  min.freq = -Inf, 
  random.color = TRUE, 
  rot.per = 0, 
  colors=warm.colours)
#dev.off()
@

<<bigram_wordcloud_positive, fig.width=8, fig.height=8>>=
title.texts.bigram.all.significant.hits <- frequencyAnalysis$jama$title$all$bigram$sig.lm.coefficients
#title.texts.bigram.words.to.exclude <- c("jama patient", "patient page", "of my", "piece of", "my mind", "mind the", "a piece", "the cover", "council on", "on scientific", "scientific affairs")
#title.texts.bigram.all.significant.hits <- title.texts.bigram.all.significant.hits[!(names(title.texts.bigram.all.significant.hits) %in% title.texts.bigram.words.to.exclude)]
#pdf("figures/jama_title_bigram_wordcloud_positive.pdf", width = 8, height = 8)
wordcloud(
          names(title.texts.bigram.all.significant.hits)[title.texts.bigram.all.significant.hits>0],
          freq=title.texts.bigram.all.significant.hits[title.texts.bigram.all.significant.hits>0], 
          min.freq = -Inf, 
          random.color = TRUE, 
          rot.per = 0, 
          colors=cool.colours)
#dev.off()

@

<<bigram_wordcloud_negative, fig.width=8, fig.height=8>>=
#pdf("figures/jama_title_bigram_wordcloud_negative.pdf", width = 8, height = 8)
wordcloud(
  names(title.texts.bigram.all.significant.hits)[title.texts.bigram.all.significant.hits<0],
  freq=-title.texts.bigram.all.significant.hits[title.texts.bigram.all.significant.hits<0], 
  min.freq = -Inf, 
  random.color = TRUE, 
  rot.per = 0, 
  colors=warm.colours)
#dev.off()
# Top 20 positive hits
#writeLines(paste(rev(tail(names(title.texts.bigram.all.significant.hits), 20)), collapse="\n"))
# Top 20 negative hits
#writeLines(paste(head(names(title.texts.bigram.all.significant.hits), 20), collapse="\n"))
@

<<>>=
get.barplot <- function(tdm.freq.per.100000, termInTitle, direction=c("positive", "negative"), ylab="Frequency per 100,000 words") {
  direction=match.arg(direction)
  barplot.df.to.plot <- data.frame(
                                freq.per.100000 = tdm.freq.per.100000[,termInTitle],
                                year = 1976:2015
                                )
  if(direction=="positive") {
    plot.colour = "#0571b0"
  } else {
    plot.colour = "#b30000"
  }
  
  ggplot(barplot.df.to.plot, aes(x = year, y = freq.per.100000)) +  
    geom_bar(stat="identity", fill=plot.colour) +
  #  geom_errorbar(aes(ymin=lower, ymax=upper)) +
    ggtitle(paste0('"', termInTitle, '"')) + # plot title
    xlab("Year") + 
    ylab(ylab) +
    theme_bw() +
    theme(panel.grid.major = element_blank())
}
@

<<barplots_epidemiological_terms, fig.width=8, fig.height=8, eval=FALSE>>=
# Epidemiological terms
grid.arrange(
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "randomized"),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "trial"),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "risk"),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "outcomes"),
  ncol=2)
@

<<barplots_patient_vs_patients, fig.width=8, fig.height=8, eval=FALSE>>=
grid.arrange(
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "a patient", direction = "negative"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "in patients"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "patient with", direction="negative"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "patients with"),
  ncol=2)
@

<<barplots_elderly, fig.width=8, fig.height=8, eval=FALSE>>=
grid.arrange(
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "the elderly", direction="negative"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "older patients"),
  ggplot() + theme_classic(),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "older adults")
  )
@

<<barplots_diabetes, fig.width=8, fig.height=4, eval=FALSE>>=
grid.arrange(
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "diabetes"),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "diabetic", direction = "negative"),
  ncol=2)
@

<<diabetes_writelines>>=
article.indices.with.diabetic <- grep("[Dd]iabetic", jamaTexts$title)
article.titles.with.diabetic <- jamaTexts$title[article.indices.with.diabetic]
article.year.with.diabetic <- jamaTexts$year[article.indices.with.diabetic]

writeLines(unique(article.titles.with.diabetic[1:20]))

writeLines(unique(article.titles.with.diabetic)[145:164])

article.indices.with.diabetes <- grep("[Dd]iabetes", jamaTexts$title)
article.titles.with.diabetes <- jamaTexts$title[article.indices.with.diabetes]
article.year.with.diabetes <- jamaTexts$year[article.indices.with.diabetes]

writeLines(head(unique(article.titles.with.diabetes), 20))
writeLines(tail(unique(article.titles.with.diabetes), 22))
@

<<barplots_causation, fig.width=8, fig.height=4, eval=FALSE>>=
grid.arrange(
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "caused by", direction = "negative"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "cause of", direction = "negative"),
  ncol=2)
@

<<barplots_kidney, fig.width=8, fig.height=4, eval=FALSE>>=
grid.arrange(
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "kidney disease"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "renal failure", direction = "negative"),
  ncol=2)
@

<<barplots_mental_health, fig.width=8, fig.height=4, eval=FALSE>>=
grid.arrange(
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "mental health"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "posttraumatic stress"),
  ncol=2)
@

<<top-terms-barplots-generating-function>>=
#barplot(sort(frequencyAnalysis$jama$title$all$monogram$lm.coefficients), horiz=TRUE, las=2, yaxt='n', xlab = "Annual change in frequency per 100000 terms")


get.top.terms.barplot <- function(stat.list, increase.n=25, decrease.n=25) {
  top.words <- c(head(sort(stat.list$sig.lm.coefficients), n=increase.n), tail(sort(stat.list$sig.lm.coefficients), n=decrease.n))
  top.words.df <- data.frame(term=names(top.words), coef=top.words)
  top.words.df$term <- factor(top.words.df$term, levels=unique(top.words.df$term))
  top.words.df$colour <- c(rep('gray', increase.n), rep('#E69F00', decrease.n))
  top.words.df$ci.95.lower <- sapply(stat.list$lm.95.percent.confints[as.character(top.words.df$term)], `[[`, 1)
  top.words.df$ci.95.upper <- sapply(stat.list$lm.95.percent.confints[as.character(top.words.df$term)], `[[`, 2)
  
  ggplot(top.words.df, aes(x=term, y=coef, fill=term)) +
      theme_classic() +
      geom_errorbar(aes(ymin=ci.95.lower, ymax=ci.95.upper), width=0.5, col="darkgray") +
      geom_bar(stat='identity') +
      coord_flip() +
      xlab("") + 
      ylab("Annual change in frequency per 100,000 terms") +
      scale_fill_manual(values=top.words.df$colour) +
      theme(legend.position="none") 
}

#barplot(c(head(sort(frequencyAnalysis$jama$title$all$monogram$sig.lm.coefficients), n=20), "."=0, "."=0, "."=0, tail(sort(frequencyAnalysis$jama$title$all$monogram$sig.lm.coefficients), n=20)), las=2, horiz=TRUE, cex.names =0.7, col=c(rep('gray', 20), rep("black", 3), rep('#E69F00', 20)))
@

\pagebreak
JAMA:
<<top-monogram-barplot-jama, fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$jama$title$all$monogram)
@
<<top-bigram-barplot-jama,  fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$jama$title$all$bigram)
@

<<plot, eval=FALSE>>=
p1 <- get.top.terms.barplot(frequencyAnalysis$jama$title$all$monogram) + ylab("Annual change in frequency\nper 100,000 terms") + theme(axis.title.x=element_text(size=9))
p2 <- get.top.terms.barplot(frequencyAnalysis$jama$title$all$bigram)  + ylab("Annual change in frequency\nper 100,000 terms") + theme(axis.title.x=element_text(size=9))
ggsave("jama_plots_together.pdf", width=6.5, height=5.7, arrangeGrob(p1, p2, layout_matrix = matrix(c(1,2), ncol=2)))
@

<<mega-plot-jama, fig.width=8, fig.height=10>>=
grid.arrange(
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "randomized"),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "trial", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "risk", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "outcomes", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "a patient", direction = "negative"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "patient with", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "in patients", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "patients with", ylab=""),
  ggplot() + theme_classic(),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "the elderly", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "older patients", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "older adults", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "caused by", direction = "negative"),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "cause of", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "mental health", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "posttraumatic stress", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "diabetic", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "renal failure", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$bigram$term.freq.per.100000, "kidney disease", ylab=""),
  get.barplot(frequencyAnalysis$jama$title$all$monogram$term.freq.per.100000, "diabetes", ylab=""),
  ncol=4
)
@

\pagebreak
Lancet:
<<top-monogram-barplot-lancet, fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$lancet$title$all$monogram)
@
<<top-bigram-barplot-lancet,  fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$lancet$title$all$bigram)
@
<<mega-plot-lancet, fig.width=8, fig.height=10>>=
grid.arrange(
  get.barplot(frequencyAnalysis$lancet$title$all$monogram$term.freq.per.100000, "randomised"),
  get.barplot(frequencyAnalysis$lancet$title$all$monogram$term.freq.per.100000, "trial", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$monogram$term.freq.per.100000, "risk", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$monogram$term.freq.per.100000, "outcomes", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "a patient", direction = "negative"),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "patient with", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "in patients", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "patients with", ylab=""),
  ggplot() + theme_classic(),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "the elderly", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "older patients", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "older adults", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "caused by", direction = "negative"),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "cause of", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "mental health", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "posttraumatic stress", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$monogram$term.freq.per.100000, "diabetic", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "renal failure", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$bigram$term.freq.per.100000, "kidney disease", ylab=""),
  get.barplot(frequencyAnalysis$lancet$title$all$monogram$term.freq.per.100000, "diabetes", ylab=""),
  ncol=4
)
@

\pagebreak
Annals of Internal Medicine:
<<top-monogram-barplot-annals, fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$annals$title$all$monogram)
@
<<top-bigram-barplot-annals,  fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$annals$title$all$bigram)
@
<<mega-plot-annals, fig.width=8, fig.height=10>>=
grid.arrange(
  get.barplot(frequencyAnalysis$annals$title$all$monogram$term.freq.per.100000, "randomized"),
  get.barplot(frequencyAnalysis$annals$title$all$monogram$term.freq.per.100000, "trial", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$monogram$term.freq.per.100000, "risk", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$monogram$term.freq.per.100000, "outcomes", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "a patient", direction = "negative"),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "patient with", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "in patients", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "patients with", ylab=""),
  ggplot() + theme_classic(),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "the elderly", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "older patients", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "older adults", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "caused by", direction = "negative"),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "cause of", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "mental health", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "posttraumatic stress", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$monogram$term.freq.per.100000, "diabetic", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "renal failure", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$bigram$term.freq.per.100000, "kidney disease", ylab=""),
  get.barplot(frequencyAnalysis$annals$title$all$monogram$term.freq.per.100000, "diabetes", ylab=""),
  ncol=4
)
@

\pagebreak
BMJ:
<<top-monogram-barplot-bmj, fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$bmj$title$all$monogram)
@
<<top-bigram-barplot-bmj,  fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$bmj$title$all$bigram)
@
<<mega-plot-bmj, fig.width=8, fig.height=10>>=
grid.arrange(
  get.barplot(frequencyAnalysis$bmj$title$all$monogram$term.freq.per.100000, "randomised"),
  get.barplot(frequencyAnalysis$bmj$title$all$monogram$term.freq.per.100000, "trial", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$monogram$term.freq.per.100000, "risk", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$monogram$term.freq.per.100000, "outcomes", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "a patient", direction = "negative"),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "patient with", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "in patients", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "patients with", ylab=""),
  ggplot() + theme_classic(),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "the elderly", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "older patients", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "older adults", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "caused by", direction = "negative"),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "cause of", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "mental health", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "posttraumatic stress", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$monogram$term.freq.per.100000, "diabetic", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "renal failure", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$bigram$term.freq.per.100000, "kidney disease", ylab=""),
  get.barplot(frequencyAnalysis$bmj$title$all$monogram$term.freq.per.100000, "diabetes", ylab=""),
  ncol=4
)
@

\pagebreak
NEJM:
<<top-monogram-barplot-nejm, fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$nejm$title$all$monogram)
@
<<top-bigram-barplot-nejm,  fig.width=5.5, fig.height=5.5, out.width="0.6\\textwidth">>=
get.top.terms.barplot(frequencyAnalysis$nejm$title$all$bigram)
@
<<mega-plot-nejm, fig.width=8, fig.height=10>>=
grid.arrange(
  get.barplot(frequencyAnalysis$nejm$title$all$monogram$term.freq.per.100000, "randomized"),
  get.barplot(frequencyAnalysis$nejm$title$all$monogram$term.freq.per.100000, "trial", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$monogram$term.freq.per.100000, "risk", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$monogram$term.freq.per.100000, "outcomes", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "a patient", direction = "negative"),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "patient with", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "in patients", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "patients with", ylab=""),
  ggplot() + theme_classic(),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "the elderly", direction="negative", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "older patients", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "older adults", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "caused by", direction = "negative"),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "cause of", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "mental health", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "posttraumatic stress", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$monogram$term.freq.per.100000, "diabetic", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "renal failure", direction = "negative", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$bigram$term.freq.per.100000, "kidney disease", ylab=""),
  get.barplot(frequencyAnalysis$nejm$title$all$monogram$term.freq.per.100000, "diabetes", ylab=""),
  ncol=4
)
@

<<>>=
# caused by, cause of

#current.conf.ints <- lapply(1:nrow(myterm.freq.per.100000), function(x) {
#  prop.test.out <- prop.test(myTDMCounts[x,"diabetes"], year.term.count.sums[x])
#  prop.test.conf.ints <- as.vector(prop.test.out$conf.int * 100000)
#  names(prop.test.conf.ints) <- c("lower", "upper")
#  return(prop.test.conf.ints)
#  })
#current.standard.errors <- sapply(1:nrow(myterm.freq.per.100000), function(x) {
#  k <- myTDMCounts[x,"diabetic"]
#  n <- year.term.count.sums[x]
#  pbar <- k / n
#  SE = sqrt(pbar * (1-pbar)/n)
#  return(SE)
#})
#barplot.df.to.plot <- as.data.frame(do.call(rbind, current.conf.ints))
#barplot.df.to.plot$freq.per.100000 <- current.freq.per.100000
#barplot.df.to.plot$year <- 1976:2015
#barplot.df.to.plot$se <- current.standard.errors * 100000

#ggplot(barplot.df.to.plot, aes(x = year, y = freq.per.100000)) +  
#  geom_point(stat="identity", fill="blue") + 
#  geom_errorbar(aes(ymin=freq.per.100000-se, ymax=freq.per.100000+se)) +
#  ggtitle("Bar plot with 95% confidence intervals") + # plot title
#  theme_bw() + # remove grey background (because Tufte said so)
#  theme(panel.grid.major = element_blank())

# do this barplot in chunks of five years
#barplot(tapply(myterm.freq.per.100000[,"from"], (seq_along(myterm.freq.per.100000[,"from"])-1) %/% 5, sum))

# find all words after "among"
#out <- sapply(title.texts, function(x) unlist(str_extract_all(x$content, '(?<=among\\s)\\w+')))
# Can do some analyses on just these words, can do fancy things like take up to the first noun after "among"


@

\end{document}